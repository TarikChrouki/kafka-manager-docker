# So bad news, we need to run some cli commands, reason is that we don't want to store passwords in this file.
# This results in that we need to create the namespace first, since we want to create the secret in the namespace.
# Execute this:
# kubectl create namespace kafka-manager
# kubectl label namespace kafka-manager istio-injection=enabled # enable istio for namespace
# kubectl annotate namespace kafka-manager field.cattle.io/projectId=c-gv2bl:p-j6vtm # Add to rancher cluster:project 'Workloads:default'
# create secret 'passwords' manually so we don't store secrets in this YAML file.
# kubectl -n kafka-manager create secret generic passwords --from-literal=KAFKA_MANAGER_PASSWORD='PASSWORD' --from-literal=KAFKA_MANAGER_LDAP_PASSWORD='PASSWORD'
---
# commented as a side effect of not storing passwords in this file.
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: kafka-manager
#   annotations:
#     field.cattle.io/projectId: c-gv2bl:p-j6vtm
#   labels:
#     istio-injection: enabled
---
apiVersion: v1
kind: Secret
metadata:
  name: environment
  namespace: kafka-manager
type: Opaque
stringData:
  ZK_HOSTS: 'zk01.se-ix.delta.prod:2181,zk02.se-ix.delta.prod:2181,zk03.se-ix.delta.prod:2181'
  KAFKA_MANAGER_AUTH_ENABLED: 'true'
  KAFKA_MANAGER_USERNAME: 'admin'
  KAFKA_MANAGER_LDAP_ENABLED: 'true'
  KAFKA_MANAGER_LDAP_SERVER: 'infra01.deltaprojects.com'
  KAFKA_MANAGER_LDAP_PORT: '636'
  KAFKA_MANAGER_LDAP_USERNAME: 'cn=readonly,dc=deltaprojects,dc=com'
  KAFKA_MANAGER_LDAP_SEARCH_BASE_DN: 'ou=Employees,dc=deltaprojects,dc=com'
  KAFKA_MANAGER_LDAP_SEARCH_FILTER: '(&(objectClass=inetOrgPerson)(&(uid=$capturedLogin$)(|(memberof=cn=IT,ou=Groups,dc=deltaprojects,dc=com)(memberof=cn=Development,ou=Groups,dc=deltaprojects,dc=com))))'
  KAFKA_MANAGER_LDAP_CONNECTION_POOL_SIZE: '10'
  KAFKA_MANAGER_LDAP_SSL: 'true'
  KAFKA_MANAGER_EXTRA_PLAY_OPTS: '-Dhttp.port=9000 -Dhttps.port=9443'
---
# commented/masked as a side effect of not storing passwords in this file.
# apiVersion: v1
# kind: Secret
# metadata:
#   name: passwords
#   namespace: kafka-manager
# type: Opaque
# stringData:
#   KAFKA_MANAGER_PASSWORD: XYZ
#   KAFKA_MANAGER_LDAP_PASSWORD: XYZ
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-manager
  namespace: kafka-manager
  labels:
    app: kafka-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-manager
  template:
    metadata:
      labels:
        app: kafka-manager
    spec:
      imagePullSecrets:
      - name: pipeline-docker-registry
      containers:
      - name: kafka-manager
        image: ${CICD_IMAGE}:${CICD_GIT_TAG}
        ports:
        - containerPort: 9000
        - containerPort: 9443
          name: kafka-manager
        envFrom:
        # Get environment variables from secret 'environment'
        - secretRef:
            name: environment
        # Get environment variables from secret 'passwords'
        - secretRef:
            name: passwords
        env:
          # Example of getting one environment variable from a Secret
          # - name: KAFKA_MANAGER_LDAP_PASSWORD
          #   valueFrom:
          #   secretKeyRef:
          #   name: passwords # Secret name.
          #   key: KAFKA_MANAGER_LDAP_PASSWORD # Secret key.
          # Example of normal environment variable.
          # - name: KEY_GOES_HERE
          #   value: VALUE GOES HERE
---
kind: Service
apiVersion: v1
metadata:
  name: kafka-manager
  namespace: kafka-manager
  annotations:
    consul.hashicorp.com/service-name: kafka-manager
spec:
  selector:
    app: kafka-manager
  ports:
    - name: kafka-manager
      protocol: TCP
      port: 443
      targetPort: kafka-manager
  type: LoadBalancer

